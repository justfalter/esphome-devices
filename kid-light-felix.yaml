esphome:
  name: kid-light-felix
    

esp32:
  board: wemos_d1_mini32
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret host_domain
  fast_connect: true
  power_save_mode: LIGHT

ota:
  num_attempts: 3
  password: !secret ota_password

api:
  password: !secret api_password

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false
  discovery_object_id_generator: "device_name"
  discovery_unique_id_generator: mac

time:
  - platform: sntp
    id: sntp_time
    servers:
      - !secret ntp_server

globals:
  - id: global_white_button_press_start
    type: "uint32_t"
    restore_value: no
    initial_value: "0"
  - id: global_green_button_press_start
    type: "uint32_t"
    restore_value: no
    initial_value: "0"
  - id: global_off_start
    type: "uint32_t"
    restore_value: no
    initial_value: "0"
  - id: global_reset_brightness
    type: "bool"
    restore_value: no
    initial_value: "false"

# # Enable logging
logger:
  level: DEBUG
  baud_rate: 0
#   level: DEBUG
  
binary_sensor:
  - platform: gpio
    name: white_button
    id: white_button
    pin:
      number: 16
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - lambda: |-
            id(global_white_button_press_start) = millis();
    on_release:
      then:
        - lambda: |-
            id(global_white_button_press_start) = 0;
            
    on_click: 
      then:
        - light.toggle: led_strip

  - platform: gpio
    name: green_button
    id: green_button
    pin:
      number: 17
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - lambda: |-
            id(global_green_button_press_start) = millis();
    on_release:
      then:
        - lambda: |-
            id(global_green_button_press_start) = 0;

number:
  - platform: template
    id: auto_off_seconds
    name: auto_off_seconds
    min_value: 0
    max_value: 3600
    step: 1
    initial_value: 600
    optimistic: True
    restore_value: True
    unit_of_measurement: seconds
    on_value: 
      then:
        - script.execute: auto_off
    
  - platform: template
    id: default_red_percent
    name: default_red_percent
    min_value: 0
    max_value: 100
    step: 1
    mode: BOX
    initial_value: 100
    optimistic: True
    restore_value: True
    unit_of_measurement: percent

  - platform: template
    id: default_green_percent
    name: default_green_percent
    min_value: 0
    max_value: 100
    step: 1
    mode: BOX
    initial_value: 65
    optimistic: True
    restore_value: True
    unit_of_measurement: percent

  - platform: template
    id: default_blue_percent
    name: default_blue_percent
    min_value: 0
    max_value: 100
    step: 1
    mode: BOX
    initial_value: 34
    optimistic: True
    restore_value: True
    unit_of_measurement: percent

  - platform: template
    id: default_brightness_percent
    name: default_brightness_percent
    min_value: 0
    max_value: 100
    step: 1
    mode: BOX
    initial_value: 33
    optimistic: True
    restore_value: True
    unit_of_measurement: percent

light:
  - platform: fastled_clockless
    chipset: WS2812
    pin: GPIO23
    num_leds: 59
    rgb_order: GRB
    name: led_strip
    id: led_strip
    default_transition_length: 0 milliseconds 
    color_correct: [100%,100%,100%]
    on_turn_on: 
      - script.stop: reset_brightness_after_delay
      - script.execute: auto_off
      - script.execute: turn_on_light
    on_turn_off:
      - script.execute: reset_brightness_after_delay

    effects:
      - addressable_rainbow:
      - addressable_color_wipe:
      - addressable_scan:
      - addressable_twinkle:
      - addressable_random_twinkle:
      - addressable_fireworks:
      - addressable_flicker:

interval:
  - interval: 200ms
    then:
      - if:
          condition:
            # the white button has been held down for more than 1 second.
            - lambda: |-
                float brightness = 0.0;
                id(led_strip).current_values_as_brightness(&brightness);
                return id(global_white_button_press_start) > 0 &&
                  (millis() - id(global_white_button_press_start)) >= 1000 &&
                  brightness < 1.0;
          then:
            - light.dim_relative: 
                id: led_strip
                relative_brightness: 5%
      - if:
          condition:
            # the green button has been held down for more than 1 second.
            - lambda: |-
                float brightness = 0.0;
                id(led_strip).current_values_as_brightness(&brightness);
                return id(global_green_button_press_start) > 0 && 
                  (millis() - id(global_green_button_press_start)) >= 1000 &&
                  brightness > 0.05;
          then:
            - light.dim_relative: 
                id: led_strip
                relative_brightness: -5%

script:
  - id: auto_off
    mode: restart
    then: 
      - delay: !lambda 'return id(auto_off_seconds).state * 1000;'
      - light.turn_off: led_strip

  - id: reset_brightness_after_delay
    then:
      - delay: 15 seconds
      - globals.set: 
          id: global_reset_brightness
          value: "true"
          
  - id: turn_on_light
    mode: restart
    then: 
      - light.turn_on:
          id: led_strip
          red: !lambda return id(default_red_percent).state / 100.0;
          green: !lambda return id(default_green_percent).state / 100.0;
          blue: !lambda return id(default_blue_percent).state / 100.0;
      - if:
          condition:
            - lambda: return id(global_reset_brightness) == true;
          then:
            - globals.set: 
                id: global_reset_brightness
                value: "false"
            - light.turn_on:
                id: led_strip
                brightness: !lambda return id(default_brightness_percent).state / 100.0;
                
